{"version":3,"sources":["components/CourseDetail.js","components/Courses.js","config.js","Data.js","components/CreateCourse.js","components/UpdateCourse.js","components/Form.js","components/Particles.js","components/UserSignIn.js","components/UserSignOut.js","components/UserSignUp.js","components/NotFound.js","Context.js","PrivateRoute.js","App.js","components/Header.js","serviceWorker.js","index.js"],"names":["ReactMarkdown","require","CourseDetail","props","deleteCourse","context","id","state","authedUser","authenticatedUser","emailAddress","password","data","then","response","console","log","history","push","catch","errors","setState","courses","courseDetails","userId","firstName","lastName","bind","this","paramsId","match","params","parsedId","parseInt","getCoursesById","course","user","error","updateAndDeleteBtns","markdownList","materialsNeeded","markdownDesc","description","Fragment","to","className","onClick","title","source","estimatedTime","Component","Courses","actions","usersCourses","mappedCourses","map","key","React","Data","path","method","body","requiresAuth","credentials","url","config","options","headers","JSON","stringify","encodedCredentials","btoa","fetch","api","status","json","Error","newCourse","CreateCourse","handleChange","event","target","value","name","handleSubmit","preventDefault","createCourse","length","errorList","index","onSubmit","type","placeholder","defaultValue","onChange","UpdateCourse","updatedCourse","updateCourse","submit","elements","ErrorsDisplay","errorsDisplay","i","UserSignIn","change","signIn","err","cancel","Form","UserSignOut","signOut","UserSignUp","createUser","Context","createContext","Provider","Cookies","getJSON","a","getUser","set","expires","remove","getCourses","receivedCourses","children","Consumer","withContext","component","rest","render","UserSignInWithContext","UserSignUpWithContext","UserSignOutWithContext","HeaderWithContext","CoursesWithContext","CourseDetailsWithContext","UpdateCourseWithContext","CreateCourseWithContext","exact","PrivateRoute","NotFound","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f607763d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nconst ReactMarkdown = require(\"react-markdown\");\r\n\r\nexport class CourseDetail extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      authenticatedUser: this.state,\r\n      emailAddress: \"\",\r\n      password: \"\",\r\n      courses: [],\r\n      errors: [],\r\n      courseDetails: [],\r\n      userId: [],\r\n      id: \"\",\r\n      firstName: null,\r\n      lastName: null,\r\n    };\r\n\r\n    this.deleteCourse = this.deleteCourse.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Setting the initial state of id to the params\r\n\r\n    const { context } = this.props;\r\n    const paramsId = this.props.match.params.id;\r\n    const parsedId = parseInt(paramsId);\r\n\r\n    this.setState({\r\n      id: parsedId,\r\n    });\r\n\r\n    /*\r\n           Get request responds by retrieving the course that relates to\r\n           the state of id.\r\n           The states of firstName and lastName are initially set to null.\r\n           The GET request responds after the page is rendered and requires a value \r\n           otherwise it comes back as undefined\r\n           */\r\n\r\n    context.data\r\n      .getCoursesById(parsedId)\r\n      .then((response) => {\r\n        if (response) {\r\n          this.setState({\r\n            courseDetails: response.course,\r\n            userId: response.course.userId,\r\n            firstName: response.course.user.firstName,\r\n            lastName: response.course.user.lastName,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Course does not exist\", error);\r\n      });\r\n  }\r\n\r\n  deleteCourse = () => {\r\n    /*\r\n            Setting the state of the emailAddress & password so that \r\n            the deleteCourse can take them as arguments.\r\n            Function requires authorization to fire.\r\n            State set in the function so that anyone who isn't logged in\r\n            can view the page.\r\n            */\r\n\r\n    const { context } = this.props;\r\n    const { id } = this.state;\r\n    const authedUser = context.authenticatedUser;\r\n    const emailAddress = authedUser.emailAddress;\r\n    const password = authedUser.password;\r\n\r\n    //Deletes course and takes the states of id, emailAddress and password as arguments\r\n\r\n    context.data\r\n      .deleteCourse(id, emailAddress, password)\r\n      .then((response) => {\r\n        if (response) {\r\n          console.log(\"destroyed\");\r\n          this.props.history.push(\"/\");\r\n        }\r\n      })\r\n      .catch((errors) => {\r\n        console.log(\"Course not destroyed\", errors);\r\n        this.setState({ errors });\r\n        console.log(this.state.errors);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    //courseDetails state needed for displaying its properties\r\n\r\n    const { courseDetails } = this.state;\r\n    const userId = courseDetails.userId;\r\n\r\n    let markdownList = courseDetails.materialsNeeded;\r\n    let markdownDesc = courseDetails.description;\r\n\r\n    /*\r\n        If a user is logged in and the authenticated user matches the userId\r\n        of the course then this will allow the authenticated user to \r\n        update and delete.\r\n        */\r\n\r\n    let updateAndDeleteBtns;\r\n\r\n    const paramsId = this.props.match.params.id;\r\n\r\n    if (this.props.context.authenticatedUser !== null) {\r\n      if (this.props.context.authenticatedUser.id === userId) {\r\n        updateAndDeleteBtns = (\r\n          <React.Fragment>\r\n            <NavLink to={`/courses/${paramsId}/update`} className=\"nav-button\">\r\n              {\" \"}\r\n              Update{\" \"}\r\n            </NavLink>\r\n            <button to=\"/\" onClick={this.deleteCourse} className=\"nav-button\">\r\n              {\" \"}\r\n              Delete{\" \"}\r\n            </button>\r\n          </React.Fragment>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"action-margin\">\r\n        <div className=\"action-bar\">\r\n          <NavLink to=\"/\" className=\"nav-button\">\r\n            {\" \"}\r\n            Return{\" \"}\r\n          </NavLink>\r\n          {updateAndDeleteBtns}\r\n        </div>\r\n        <div className=\"detail-div\">\r\n          <div>\r\n            <div className=\"detail-div-left\">\r\n              <h3> Course </h3>\r\n              <h1 className=\"detailH1\"> {courseDetails.title} </h1>\r\n              <h3> Owner </h3>\r\n              <h3>\r\n                {\" \"}\r\n                {this.state.firstName} {this.state.lastName}{\" \"}\r\n              </h3>\r\n              <span className=\"detailDesc\">\r\n                {\" \"}\r\n                <ReactMarkdown source={markdownDesc} />{\" \"}\r\n              </span>\r\n            </div>\r\n            <div className=\"detail-div-right\">\r\n              <h3> Estimated time </h3>\r\n              <p> {courseDetails.estimatedTime} </p>\r\n              <h3> Materials </h3>\r\n              <ul className=\"list-detail-style-right\">\r\n                <li>\r\n                  {\" \"}\r\n                  <ReactMarkdown source={markdownList} />{\" \"}\r\n                </li>\r\n              </ul>\r\n              <div id=\"tsparticles\" className=\"tsparticles\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CourseDetail;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nclass Courses extends React.Component {\r\n  state = {\r\n    authenticatedUser: this.state,\r\n    courses: [],\r\n    errors: [],\r\n  };\r\n\r\n  // GET request called to get the full list of active courses\r\n\r\n  componentDidMount() {\r\n    // Destructuring context to access the usersCourses function\r\n\r\n    const { context } = this.props;\r\n\r\n    this.setState({\r\n      courses: context.actions.usersCourses(),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { context } = this.props;\r\n\r\n    /*\r\n    Cycling through the courses retrieved from the GET request.\r\n    For each courses a div created with a NavLink to the\r\n    relative detail page.\r\n\r\n    mappedCourses stores this and used to display the results in \r\n    the return render method.\r\n    */\r\n\r\n    let mappedCourses;\r\n\r\n    if (context.courses !== null) {\r\n      mappedCourses = context.courses.courses.map((course) => (\r\n        <div className=\"table-cell\" key={course.id}>\r\n          <p>Course</p>\r\n          <NavLink to={`/courses/${course.id}`}> {course.title} </NavLink>\r\n        </div>\r\n      ));\r\n    } else {\r\n      return (\r\n        <div>\r\n          <p> Loading.... </p>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div id=\"tsparticles\" className=\"tsparticles\">\r\n        <div className=\"course-list-div\">\r\n          <div className=\"table\">\r\n            {mappedCourses}\r\n            <div className=\"table-cell\">\r\n              <NavLink to=\"/courses/create\"> + New Course </NavLink>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Courses;\r\n","export default {\r\n    apiBaseUrl: 'https://mern-api-backend.herokuapp.com/api',\r\n  };","import config from \"./config\";\r\n\r\nexport default class Data {\r\n\r\n    // api method used to make GET and POST requests to the REST API\r\n\r\n    api(path, method = \"GET\", body = null, requiresAuth = false, credentials = null) {\r\n\r\n        // const url is the based defined URL from config\r\n        \r\n        const url = config.apiBaseUrl + path;\r\n\r\n        // The options object sends a request with the HTTP method (GET, PUT, POST, DELETE),\r\n        // as well as the request headers\r\n\r\n        const options = {\r\n            method,\r\n            headers: {\r\n              \"Content-Type\": \"application/json; charset=utf-8\",\r\n            },\r\n          };\r\n\r\n          // If the body returned from the request has data it is then stringifyed\r\n\r\n          if (body !== null) {\r\n            options.body = JSON.stringify(body);\r\n          }\r\n\r\n          // Using bota to encode the emailAddress and password of the authenticated user\r\n\r\n          if (requiresAuth) {\r\n            const encodedCredentials = btoa(`${credentials.emailAddress}:${credentials.password}`);\r\n\r\n            // Adding a new property to options.headers\r\n\r\n            options.headers[\"Authorization\"] = `Basic ${encodedCredentials}`;\r\n          }\r\n\r\n        return fetch(url, options);\r\n    }\r\n\r\n    // Sever request. Get user. async function takes the credentials as arguments \r\n\r\n    async getUser(emailAddress, password) {\r\n        const response = await this.api(`/users`, \"GET\", null, true, { emailAddress, password });\r\n        if (response.status === 200) {\r\n          return response.json().then(data => data);\r\n        }\r\n        else if (response.status === 401) {\r\n          return null;\r\n        }\r\n        else {\r\n          throw new Error();\r\n        }\r\n      }\r\n\r\n      async updateCourse(id, course, emailAddress, password) {\r\n        const response = await this.api(`/courses/${id}`, \"PUT\", course, true, { emailAddress, password } );\r\n        if (response.status === 204) {\r\n          return response;\r\n        }\r\n        else if (response.status === 400) {\r\n          return response.json().then(data => {\r\n            return data.errors;\r\n          });\r\n        }\r\n      }\r\n\r\n      async createUser(user) {\r\n        const response = await this.api(\"/users\", \"POST\", user);\r\n        if (response.status === 201) {\r\n          return [];\r\n        }\r\n        else if (response.status === 400) {\r\n          return response.json().then(data => {\r\n            return data.errors;\r\n          });\r\n        }\r\n      }\r\n\r\n      async createCourse(newCourse, emailAddress, password,) {\r\n        const response = await this.api(\"/courses\", \"POST\", newCourse, true, { emailAddress, password} );\r\n        if (response.status === 201) {\r\n          return [];\r\n        }\r\n        else if (response.status === 400) {\r\n          return response.json().then(data => {\r\n            return data.errors;\r\n          });\r\n        } else {\r\n          throw new Error();\r\n        }\r\n      }\r\n    \r\n    \r\n\r\n      async getCourses() {\r\n        const response = await this.api(\"/courses\", \"GET\", null, false);\r\n        if (response.status === 200) {\r\n          return response.json().then(data => data);\r\n        }\r\n        else if (response.status === 401) {\r\n          return response.json().then(data => {\r\n            return data.errors;\r\n          });\r\n        }\r\n        else {\r\n          throw new Error();\r\n        }\r\n      }\r\n\r\n      async getCoursesById(id) {\r\n        const response = await this.api(`/courses/${id}`, \"GET\", null, false);\r\n        if (response.status === 200) {\r\n          return response.json().then(data => data);\r\n        }\r\n        else if (response.status === 401) {\r\n          return null;\r\n        }\r\n        else {\r\n          throw new Error();\r\n        }\r\n      }\r\n\r\n      async deleteCourse(id, emailAddress, password) {\r\n        const response = await this.api(`/courses/${id}`, \"DELETE\", null, true, { emailAddress, password });\r\n        if (response) {\r\n          return response;\r\n        }\r\n        else if (response.status === 401) {\r\n          return null;\r\n        }\r\n        else {\r\n          throw new Error();\r\n        }\r\n      }\r\n}","import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Data from \"../Data\";\r\n\r\nexport class CreateCourse extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.data = new Data();\r\n    this.state = {\r\n      authenticatedUser: this.state,\r\n      emailAddress: \"\",\r\n      password: \"\",\r\n      userId: \"\",\r\n      title: \"\",\r\n      description: \"\",\r\n      estimatedTime: \"\",\r\n      materialsNeeded: \"\",\r\n      errors: [],\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    \r\n    /*\r\n    State for password, emailAddress and userId set from the details\r\n    from the logged in user\r\n    */\r\n\r\n    const { context } = this.props;\r\n    const authedUser = context.authenticatedUser;\r\n    const emailAddress = authedUser.emailAddress;\r\n    const password = authedUser.password;\r\n    const userId = authedUser.id;\r\n\r\n    this.setState({\r\n      emailAddress: emailAddress,\r\n      password: password,\r\n      userId: userId,\r\n    });\r\n  }\r\n\r\n  /* \r\n        Takes the value from each text box or input and\r\n        sets the state to the value of the corresponding name\r\n    */\r\n\r\n  handleChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    const { context } = this.props;\r\n    // Takes the state of each value needed to authenticate a POST request from the Rest Api.\r\n\r\n    const {\r\n      userId,\r\n      title,\r\n      description,\r\n      estimatedTime,\r\n      materialsNeeded,\r\n    } = this.state;\r\n\r\n    // Creates a new object with each property as the value of each corresponding state\r\n\r\n    const newCourse = {\r\n      userId,\r\n      title,\r\n      description,\r\n      estimatedTime,\r\n      materialsNeeded,\r\n    };\r\n\r\n    const { emailAddress, password } = this.state;\r\n\r\n    // The POST request is made if title and description are not empty\r\n    // POST request requires user email and password to make the request.\r\n\r\n    event.preventDefault();\r\n\r\n    context.data\r\n      .createCourse(newCourse, emailAddress, password)\r\n      .then((errors) => {\r\n        if (errors.length) {\r\n          this.setState({ errors });\r\n          console.log(errors);\r\n        } else {\r\n          this.props.history.push(\"/\");\r\n        }\r\n      });\r\n  };\r\n\r\n  render() {\r\n    let errorList;\r\n\r\n    if (this.state.errors.length) {\r\n      errorList = this.state.errors.map((error, index) => {\r\n        return (\r\n          <p className=\"create-div-validations\" key={index}>\r\n            {error}\r\n          </p>\r\n        );\r\n      });\r\n    }\r\n\r\n    return (\r\n      <div id=\"tsparticles\" className=\"tsparticles\">\r\n        <h1 className=\"create-h1\"> Create course </h1>\r\n        {errorList}\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div className=\"create-div\">\r\n            <div className=\"create-div-left\">\r\n              <h4>Title</h4>\r\n              <input\r\n                id=\"title\"\r\n                name=\"title\"\r\n                type=\"text\"\r\n                placeholder=\"Course title\"\r\n                defaultValue=\"\"\r\n                className=\"create-div-input\"\r\n                onChange={this.handleChange}\r\n              ></input>\r\n              <h4>Course description</h4>\r\n              <textarea\r\n                id=\"description\"\r\n                className=\"text-area-left\"\r\n                name=\"description\"\r\n                defaultValue=\"\"\r\n                placeholder=\"Course description\"\r\n                onChange={this.handleChange}\r\n              ></textarea>\r\n            </div>\r\n            <div className=\"create-div-right\">\r\n              <ul>\r\n                <li className=\"create-div-li\">\r\n                  <h4 className=\"h4-create\">Estimated Time</h4>\r\n                  <div>\r\n                    <input\r\n                      id=\"estimatedTime\"\r\n                      name=\"estimatedTime\"\r\n                      type=\"text\"\r\n                      placeholder=\"Hours\"\r\n                      className=\"create-div-input-right\"\r\n                      onChange={this.handleChange}\r\n                    ></input>\r\n                  </div>\r\n                </li>\r\n                <li className=\"create-div-li\">\r\n                  <h4 className=\"h4-create\">Materials Needed</h4>\r\n                  <div>\r\n                    <textarea\r\n                      id=\"materialsNeeded\"\r\n                      className=\"create-textarea-right\"\r\n                      name=\"materialsNeeded\"\r\n                      placeholder=\"List materials\"\r\n                      onChange={this.handleChange}\r\n                    ></textarea>\r\n                  </div>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div className=\"create-div-buttons\">\r\n            <button className=\"create-buttons\" type=\"submit\">\r\n              Create Course\r\n            </button>\r\n            <NavLink className=\"create-buttons\" to=\"/\">\r\n              Cancel\r\n            </NavLink>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CreateCourse;\r\n","import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Data from \"../Data\";\r\n\r\n\r\nexport class UpdateCourse extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.data = new Data();\r\n\r\n    this.state = {\r\n      authenticatedUser: this.state,\r\n      emailAddress: \"\",\r\n      password: \"\",\r\n      userId: \"\",\r\n      title: \"\",\r\n      description: \"\",\r\n      estimatedTime: \"\",\r\n      materialsNeeded: \"\",\r\n      id: \"\",\r\n      errors: [],\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Sets the id state to the course id\r\n\r\n    const paramsId = this.props.match.params.id;\r\n    const parsedId = parseInt(paramsId);\r\n\r\n    this.setState({\r\n      id: parsedId,\r\n    });\r\n\r\n    // Setting the email address and password to the authenticated user\r\n\r\n    const { context } = this.props;\r\n    const authedUser = context.authenticatedUser;\r\n    const emailAddress = authedUser.emailAddress;\r\n    const password = authedUser.password;\r\n\r\n    this.setState({\r\n      emailAddress: emailAddress,\r\n      password: password,\r\n    });\r\n\r\n    // Using the rest api get method to retrieve the course based on the course id\r\n\r\n    context.data\r\n      .getCoursesById(parsedId)\r\n      .then((response) => {\r\n        if (response) {\r\n          console.log(\"True\");\r\n          this.setState({\r\n            title: response.course.title,\r\n            description: response.course.description,\r\n            estimatedTime: response.course.estimatedTime,\r\n            materialsNeeded: response.course.materialsNeeded,\r\n            userId: response.course.userId,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Course does not exists\", error);\r\n      });\r\n  }\r\n\r\n  // Takes the value from each text box or input and sets the state to the value of the corresponding name\r\n\r\n  handleChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    const { context } = this.props;\r\n\r\n    // Takes the state of each value needed to authenticate a PUT request from the Rest Api.\r\n\r\n    const {\r\n      userId,\r\n      title,\r\n      description,\r\n      estimatedTime,\r\n      materialsNeeded,\r\n    } = this.state;\r\n\r\n    // Creates a new object with each property as the value of each corresponding state\r\n\r\n    const updatedCourse = {\r\n      userId,\r\n      title,\r\n      description,\r\n      estimatedTime,\r\n      materialsNeeded,\r\n    };\r\n\r\n    const { emailAddress, password } = this.state;\r\n    const { id } = this.state;\r\n\r\n    const paramsId = this.props.match.params.id;\r\n    const parsedId = parseInt(paramsId);\r\n\r\n    event.preventDefault();\r\n\r\n    // The PUT request is made if title and description are not empty\r\n    // PUT request requires the id of the course as well as the user email and password to make a change.\r\n\r\n    context.data\r\n      .updateCourse(id, updatedCourse, emailAddress, password)\r\n      .then((errors) => {\r\n        if (errors.length) {\r\n          this.setState({ errors });\r\n          console.log(errors);\r\n        } else if (this.state.description !== \"\" || this.state.title !== \"\") {\r\n          this.props.history.push(`/courses/${parsedId}`);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { context } = this.props;\r\n    const authedUser = context.authenticatedUser;\r\n\r\n    const paramsId = this.props.match.params.id;\r\n    const parsedId = parseInt(paramsId);\r\n\r\n    let errorList;\r\n\r\n    if (this.state.errors.length) {\r\n      errorList = this.state.errors.map((error, index) => {\r\n        return (\r\n          <p className=\"create-div-validations\" key={index}>\r\n            {error}\r\n          </p>\r\n        );\r\n      });\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1 className=\"update-h1\"> Update Course </h1>\r\n\r\n        <form onSubmit={this.handleSubmit}>\r\n          {errorList}\r\n          <div className=\"update-div\">\r\n            <div className=\"update-div-left\">\r\n              <h3>Course title</h3>\r\n              <div>\r\n                <input\r\n                  id=\"title\"\r\n                  name=\"title\"\r\n                  type=\"text\"\r\n                  onChange={this.handleChange}\r\n                  className=\"update-div-input\"\r\n                  value={this.state.title}\r\n                ></input>\r\n              </div>\r\n\r\n              <p>\r\n                By {authedUser.firstName} {authedUser.lastName}\r\n              </p>\r\n              <textarea\r\n                className=\"text-area-left\"\r\n                id=\"description\"\r\n                name=\"description\"\r\n                onChange={this.handleChange}\r\n                value={this.state.description}\r\n              ></textarea>\r\n            </div>\r\n            <div className=\"update-div-right\">\r\n              <ul className=\"list-style-right\">\r\n                <li>\r\n                  <h4>Estimated Time</h4>\r\n                  <div>\r\n                    <input\r\n                      className=\"update-div-input-right\"\r\n                      id=\"estimatedTime\"\r\n                      name=\"estimatedTime\"\r\n                      type=\"text\"\r\n                      onChange={this.handleChange}\r\n                      defaultValue={this.state.estimatedTime}\r\n                    ></input>\r\n                  </div>\r\n                </li>\r\n                <li>\r\n                  <h4>Materials Needed</h4>\r\n                  <div>\r\n                    <textarea\r\n                      className=\"text-area-right\"\r\n                      id=\"materialsNeeded\"\r\n                      name=\"materialsNeeded\"\r\n                      onChange={this.handleChange}\r\n                      defaultValue={this.state.materialsNeeded}\r\n                    ></textarea>\r\n                  </div>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div className=\"buttons\">\r\n            <button className=\"update-button\" type=\"submit\">\r\n              Update Course\r\n            </button>\r\n            <NavLink className=\"update-button\" to={`/courses/${parsedId}`}>\r\n              Cancel\r\n            </NavLink>\r\n          </div>\r\n          <div id=\"tsparticles\" className=\"tsparticles\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UpdateCourse;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport default (props) => {\r\n  const { errors, submit, elements } = props;\r\n\r\n  /* Stops page from refreshing */\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    submit();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <ErrorsDisplay errors={errors} />\r\n      <form onSubmit={handleSubmit}>\r\n        {elements()}\r\n        <div>\r\n          <button className=\"signInBtn\" type=\"submit\">\r\n            Submit\r\n          </button>\r\n          <NavLink className=\"button-2\" to=\"/\">\r\n            Cancel\r\n          </NavLink>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\n/* If the authentication of the user fails then the error is rendered to the user */\r\n\r\nfunction ErrorsDisplay({ errors }) {\r\n  let errorsDisplay = null;\r\n\r\n  if (errors.length) {\r\n    errorsDisplay = (\r\n      <div>\r\n        <h2>Validation errors</h2>\r\n        <div>\r\n          <ul>\r\n            {errors.map((error, i) => (\r\n              <li key={i}>{error}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return errorsDisplay;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Particles from \"react-tsparticles\";\r\n\r\nclass ParticlesContainer extends Component {\r\n  render() {\r\n    return (\r\n      <Particles\r\n        id=\"tsparticles\"\r\n        options={{\r\n          fpsLimit: 60,\r\n          interactivity: {\r\n            detectsOn: \"canvas\",\r\n            events: {\r\n              onClick: {\r\n                enable: true,\r\n                mode: \"push\",\r\n              },\r\n              onHover: {\r\n                enable: true,\r\n                mode: \"repulse\",\r\n              },\r\n              resize: true,\r\n            },\r\n            modes: {\r\n              bubble: {\r\n                distance: 400,\r\n                duration: 2,\r\n                opacity: 0.8,\r\n                size: 40,\r\n              },\r\n              push: {\r\n                quantity: 4,\r\n              },\r\n              repulse: {\r\n                distance: 100,\r\n                duration: 0.4,\r\n              },\r\n            },\r\n          },\r\n          particles: {\r\n            color: {\r\n              value: \"#fff\",\r\n            },\r\n            links: {\r\n              color: \"#fff\",\r\n              distance: 150,\r\n              enable: true,\r\n              opacity: 0.5,\r\n              width: 1,\r\n            },\r\n            collisions: {\r\n              enable: true,\r\n            },\r\n            move: {\r\n              direction: \"none\",\r\n              enable: true,\r\n              outMode: \"bounce\",\r\n              random: false,\r\n              speed: 1,\r\n              straight: false,\r\n            },\r\n            number: {\r\n              density: {\r\n                enable: true,\r\n                value_area: 1800,\r\n              },\r\n              value: 180,\r\n            },\r\n            opacity: {\r\n              value: 0.5,\r\n            },\r\n            shape: {\r\n              type: \"circle\",\r\n            },\r\n            size: {\r\n              random: true,\r\n              value: 5,\r\n            },\r\n          },\r\n          detectRetina: true,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default ParticlesContainer;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ParticlesContainer from \"./Particles\";\r\nimport Form from \"./Form\";\r\n\r\nexport default class UserSignIn extends Component {\r\n  state = {\r\n    emailAddress: \"\",\r\n    password: \"\",\r\n    errors: [],\r\n  };\r\n\r\n  render() {\r\n    const { errors } = this.state;\r\n\r\n    return (\r\n      <div id=\"tsparticles\" className=\"tsparticles\">\r\n        <div className=\"sign-in-div\">\r\n          <h1 className=\"sign-in-h1\">Sign In</h1>\r\n          <Form\r\n            cancel={this.cancel}\r\n            errors={errors}\r\n            submit={this.submit}\r\n            elements={() => (\r\n              <React.Fragment>\r\n                <div className=\"input-container\">\r\n                  <input\r\n                    className=\"sign-in-input\"\r\n                    id=\"emailAddress\"\r\n                    name=\"emailAddress\"\r\n                    type=\"text\"\r\n                    onChange={this.change}\r\n                    placeholder=\"emailAddress\"\r\n                  />\r\n                  <input\r\n                    className=\"sign-in-input\"\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    onChange={this.change}\r\n                    placeholder=\"Password\"\r\n                  />\r\n                </div>\r\n              </React.Fragment>\r\n            )}\r\n          />\r\n          <p>\r\n            Don't have a user account?{\" \"}\r\n            <Link className=\"sign-up-link\" to=\"/signup\">\r\n              Click here\r\n            </Link>{\" \"}\r\n            to sign up!\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  change = (event) => {\r\n    event.preventDefault();\r\n    const emailAddress = event.target.name;\r\n    const value = event.target.value;\r\n\r\n    this.setState(() => {\r\n      return {\r\n        [emailAddress]: value,\r\n      };\r\n    });\r\n  };\r\n\r\n  /*\r\nthis submit function unpacks this.state into variables.\r\nThe function signIn is accessed through the context property\r\nwhich was passed from context.js.\r\n*/\r\n\r\n  submit = () => {\r\n    console.log(\"Fire\");\r\n    const { context } = this.props;\r\n    const { emailAddress, password } = this.state;\r\n\r\n    context.actions\r\n      .signIn(emailAddress, password)\r\n      .then((user) => {\r\n        if (user === null) {\r\n          this.setState(() => {\r\n            return { errors: [\"Sign-in was unsuccessful\"] };\r\n          });\r\n        } else {\r\n          this.props.history.push(\"/\");\r\n          context.actions.usersCourses();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        this.props.history.push(\"/NotFound\");\r\n      });\r\n  };\r\n\r\n  cancel = () => {\r\n    this.props.history.push(\"/UserSignOut\");\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nexport class UserSignOut extends Component {\r\n  componentDidMount() {\r\n    const { context } = this.props;\r\n    context.actions.signOut();\r\n  }\r\n\r\n  render() {\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n}\r\n\r\nexport default UserSignOut;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Form from \"./Form\";\r\n\r\nexport class UserSignUp extends Component {\r\n  state = {\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    emailAddress: \"\",\r\n    password: \"\",\r\n    errors: [],\r\n  };\r\n\r\n  render() {\r\n    const { firstName, lastName, emailAddress, password, errors } = this.state;\r\n\r\n    return (\r\n      <div className=\"sign-up-div\">\r\n        <div>\r\n          <h1>Sign Up</h1>\r\n          <Form\r\n            errors={errors}\r\n            submit={this.submit}\r\n            elements={() => (\r\n              <React.Fragment>\r\n                <input\r\n                  className=\"sign-up-input\"\r\n                  id=\"firstName\"\r\n                  name=\"firstName\"\r\n                  type=\"text\"\r\n                  value={firstName}\r\n                  onChange={this.change}\r\n                  placeholder=\"First name\"\r\n                />\r\n                <input\r\n                  className=\"sign-up-input\"\r\n                  id=\"LastName\"\r\n                  name=\"lastName\"\r\n                  type=\"text\"\r\n                  value={lastName}\r\n                  onChange={this.change}\r\n                  placeholder=\"Last Name\"\r\n                />\r\n                <input\r\n                  className=\"sign-up-input\"\r\n                  id=\"emailAddress\"\r\n                  name=\"emailAddress\"\r\n                  type=\"text\"\r\n                  value={emailAddress}\r\n                  onChange={this.change}\r\n                  placeholder=\"emailAddress\"\r\n                />\r\n                <input\r\n                  className=\"sign-up-input\"\r\n                  id=\"password\"\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  value={password}\r\n                  onChange={this.change}\r\n                  placeholder=\"Password\"\r\n                />\r\n              </React.Fragment>\r\n            )}\r\n          />\r\n        </div>\r\n        <p>\r\n          Already have a user account?{\" \"}\r\n          <Link className=\"sign-in-link\" to=\"/signin\">\r\n            {\" \"}\r\n            Sign in!{\" \"}\r\n          </Link>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  change = (event) => {\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n\r\n    this.setState(() => {\r\n      return {\r\n        [name]: value,\r\n      };\r\n    });\r\n  };\r\n\r\n  submit = () => {\r\n    const { context } = this.props;\r\n\r\n    // Takes the state of each value needed to authenticate a PUT request from the REST API.\r\n\r\n    const { firstName, lastName, emailAddress, password } = this.state;\r\n\r\n    // Creates a new object with each property as the value of each corresponding state\r\n\r\n    const user = {\r\n      firstName,\r\n      lastName,\r\n      emailAddress,\r\n      password,\r\n    };\r\n\r\n    /*\r\n    Create user takes the user object to create the new user and then signs in the user using the \r\n    emailAddress and password properties as arguments.    \r\n    */\r\n\r\n    context.data\r\n      .createUser(user)\r\n      .then((errors) => {\r\n        if (errors.length) {\r\n          this.setState({ errors });\r\n          console.log(errors);\r\n        } else {\r\n          context.actions.signIn(emailAddress, password).then(() => {\r\n            this.props.history.push(\"/\");\r\n          });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        console.log(this.state.errors);\r\n        this.props.history.push(\"/error\");\r\n      });\r\n  };\r\n}\r\n\r\nexport default UserSignUp;\r\n\r\n// git branch -M main\r\n// git remote add origin https://github.com/RandyBeans448/client.git\r\n// git push -u origin main","import React from \"react\";\r\n\r\nexport default () => (\r\n  <div>\r\n    <h1>Not Found</h1>\r\n    <p>Sorry! We couldn't find the page you're looking for.</p>\r\n  </div>\r\n);\r\n","import React, { Component } from \"react\";\r\nimport Data from \"./Data\";\r\nimport Cookies from \"js-cookie\";\r\nconst Context = React.createContext(); \r\n\r\nexport class Provider extends Component {\r\n\r\n/* the data instance inside the constructor makes the\r\nData API utility methods available throughout the app via Context */\r\n\r\n    constructor() {\r\n        super();\r\n        this.data = new Data();\r\n    }\r\n\r\n    state = { \r\n      authenticatedUser: Cookies.getJSON(\"authenticatedUser\") || null,\r\n      courses: null\r\n    }\r\n\r\n        render () {\r\n        const { authenticatedUser } = this.state;\r\n        const { courses } = this.state;\r\n        const value = {\r\n          authenticatedUser,\r\n          courses,\r\n            data: this.data,\r\n            actions: {\r\n              signIn: this.signIn,\r\n              signOut: this.signOut,\r\n              usersCourses: this.usersCourses\r\n            }\r\n          };\r\n\r\n        /* Context.Provider class is a higher order component\r\n        which provides the application state and any actions or event handlers\r\n        that need to be shared between components, via a required value prop. */\r\n\r\n            return (\r\n            <Context.Provider value={value}>\r\n                {this.props.children}\r\n            </Context.Provider>  \r\n            \r\n\r\n            );\r\n        }\r\n\r\n        signIn = async (emailAddress, password) => {\r\n          const user = await this.data.getUser(emailAddress, password);\r\n          if (user) {\r\n            user.password = password;\r\n          }\r\n          if (user !== null) {\r\n            this.setState(() => {\r\n              return {\r\n                authenticatedUser: user,\r\n              };\r\n            });\r\n            Cookies.set(\"authenticatedUser\", JSON.stringify(user), { expires: 1 });\r\n          }\r\n          return user;\r\n        }\r\n    \r\n        signOut = () => {\r\n            this.setState(() => {\r\n              return {\r\n                authenticatedUser: null,\r\n              };\r\n            });\r\n            Cookies.remove(\"authenticatedUser\");\r\n          }\r\n\r\n        usersCourses = async () => {\r\n          await this.data.getCourses().then((response) => {\r\n            let receivedCourses = response;\r\n            if (receivedCourses) {\r\n              this.setState(() => {\r\n                return {                                                                                                                                  \r\n                  courses: receivedCourses\r\n                };\r\n              });\r\n             } \r\n          }).catch(error => {\r\n            console.log(\"API request failed\", error)\r\n            // react on errors.\r\n          })\r\n        }\r\n\r\n    };\r\n\r\n    export const Consumer = Context.Consumer;\r\n    \r\n// withContext is a higher-order function that wraps a provided component in a <Context.Consumer> component.\r\n// withContext auto connects the component passed to it to all actions and context changes\r\n\r\nexport default function withContext(Component) {\r\n    return function ContextComponent(props) {\r\n      return (\r\n        <Context.Consumer>\r\n             { context => <Component {...props} context={context} /> } \r\n        </Context.Consumer>\r\n      );\r\n    }\r\n  }\r\n\r\n","import React from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Consumer } from \"./Context\";\r\n\r\n/* The PrivateRoute component is a high-order component\r\n that only makes the courses route accessible to authenticated users. */\r\n\r\nexport default ({ component: Component, ...rest }) => {\r\n    return (\r\n     <Consumer>\r\n        {context => (\r\n            <Route\r\n             {...rest}\r\n             render={props => context.authenticatedUser ? (\r\n                <Component {...props} />\r\n            ) : (\r\n                <Redirect to=\"/signin\"/>\r\n            )\r\n          }\r\n        />\r\n     )}\r\n      </Consumer>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom';\n\n\nimport './App.css';\nimport CourseDetail from './components/CourseDetail';\nimport Courses from './components/Courses';\nimport CreateCourse from './components/CreateCourse';\nimport Header from './components/Header';\nimport UpdateCourse from './components/UpdateCourse';\nimport UserSignIn from './components/UserSignIn';\nimport UserSignOut from './components/UserSignOut';\nimport UserSignUp from './components/UserSignUp';\nimport NotFound from './components/NotFound';\nimport PrivateRoute from './PrivateRoute';\nimport withContext from './Context';\n\n//Connecting the SignUp & SignIn to context.\n\n//This shares the data and actions throughout the component tree\n\n/* Adding the const's as the component to the route handler\nlets the components UserSignIn & UserSignUp gain access to \nthe function in context and any data or actions passed into\n<Context.Provider value={value}> */\n\nconst UserSignInWithContext = withContext(UserSignIn);\nconst UserSignUpWithContext = withContext(UserSignUp);\nconst UserSignOutWithContext = withContext(UserSignOut);\n\n/* To let the user know they are signed in\nneed to make changes to the name display in the end header */\n\nconst HeaderWithContext = withContext(Header);\nconst CoursesWithContext = withContext(Courses);\nconst CourseDetailsWithContext = withContext(CourseDetail);\nconst UpdateCourseWithContext = withContext(UpdateCourse)\nconst CreateCourseWithContext = withContext(CreateCourse)\n\nexport default () => (\n  <Router>\n    <div >\n    <HeaderWithContext/>\n      <Switch>\n        <Route exact path=\"/\" component={CoursesWithContext} />\n        <PrivateRoute path=\"/courses/create\" component={CreateCourseWithContext} />\n        <Route exact path=\"/courses/:id\" component={CourseDetailsWithContext} />\n        <PrivateRoute path=\"/courses/:id/update\" component={UpdateCourseWithContext} />\n        <Route path=\"/signin\" component={UserSignInWithContext} />\n        <Route path=\"/signup\" component={UserSignUpWithContext} />\n        <Route path=\"/signout\" component={UserSignOutWithContext} />\n        <Route component={NotFound} />\n      </Switch >\n    </div >\n  </Router>\n  \n);\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default ({ context }) => {\r\n  const authedUser = context.authenticatedUser;\r\n\r\n  //Nav bar conditionally rendered on if the user is logged in or not\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"header-div\">\r\n        <div>\r\n          <Link to=\"/\" className=\"header-div-left\">\r\n            {\" \"}\r\n            Student Courses{\" \"}\r\n          </Link>\r\n        </div>\r\n\r\n        <nav>\r\n          {authedUser ? (\r\n            <React.Fragment>\r\n              <div className=\"header-div-right\">\r\n                <span className=\"header-div-right\">\r\n                  {\" \"}\r\n                  Welcome {authedUser.firstName} {authedUser.lastName}{\" \"}\r\n                </span>\r\n                <Link className=\"header-div-right\" to=\"/signout\">\r\n                  {\" \"}\r\n                  Sign Out{\" \"}\r\n                </Link>\r\n              </div>\r\n            </React.Fragment>\r\n          ) : (\r\n            <React.Fragment>\r\n              <div className=\"header-div-right-up-in\">\r\n                <Link className=\"header-div-right\" to=\"/signup\">\r\n                  Sign Up\r\n                </Link>\r\n                <Link className=\"header-div-right\" to=\"/signin\">\r\n                  Sign In\r\n                </Link>\r\n              </div>\r\n            </React.Fragment>\r\n          )}\r\n        </nav>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from './Context';\n\nReactDOM.render(\n  <Provider >\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}